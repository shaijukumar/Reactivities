echo "# Reactivities" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/shaijukumar/Reactivities.git
git push -u origin master

Git add . 
git commit -m "Change3"
git push origin master

https://snippet-generator.app/



Comment Code Block - Ctrl+K+C/Ctrl+K+U 
Format selection - Ctrl+K Ctrl+F
renaming all occurrences of a variable  - Ctrl F2


EF
=======
> dotnet tool install --global dotnet-ef 
> dotnet ef 
> dotnet ef migrations add InitialCreate -p Persistence/ -s API/ 
> dotnet ef migrations add ActivitiesAdded -p Persistence/ -s API/ 
> drop database 
> dotnet ef  database drop -p Persistence/ -s API/ 
> dotnet watch run  

Secrets 
=======
> dotnet user-secrets  
> dotnet user-secrets init -p API/ 
> dotnet user-secrets set "TokenKey" "MyKey123”  -p API/  
> dotnet user-secrets list -p API/  

Project  
=======
> dotnet new classlib -n Infrastructure  
> dotnet sln add Infrastructure  
> dotnet add reference ../Application  
> Dotnet restore 

Pages:

Tech
=====
    VS Code
    -------
        shortcuts

LCHF
====


Steps for relational database
1. Create domain calss > Domain\Comment.cs
2. Add virtual entry in ref 
    > Domain\Activity.cs
    > public virtual ICollection<Comment> Comments { get; set; }
3. Add entry in data context calss
    > Persistence\DataContext.cs
    > public DbSet<Comment> Comments { get; set; }
4. Ctreate  data transfer object (DTO) calss
    > Application\Comments\CommentDto.cs
5. Create MappingProfile
    > Application\Comments\MappingProfile.cs
6. Create handler
    > Application\Comments\Create.cs
7. 


SignalR
=======
1. API\Startup.cs
    > services.AddSignalR();

    >endpoints.MapHub<ChatHub>("/chat");

    > Update Cors
        policy.AllowAnyHeader().AllowAnyMethod().WithOrigins("http://localhost:3000").AllowCredentials();
2. Create ChatHub
    > API\SignalR\ChatHub.cs
3. Create Auth for SignalR in  API\Startup.cs
    opt.Events = new JwtBearerEvents
    {
        OnMessageReceived = context => 
        {
            var accessToken = context.Request.Query["access_token"];
            var path = context.HttpContext.Request.Path;
            if (!string.IsNullOrEmpty(accessToken) && (path.StartsWithSegments("/chat")))
            {
                context.Token = accessToken;
            }

            return Task.CompletedTask;
        }
    };
4. Add signalR in clint
    npm install @microsoft/signalr
5. Create HubConnection in client-app\src\app\store\activityStore.ts

    @action createHubConnection = () => {
        this.hubConnection = new HubConnectionBuilder()
        .withUrl('http://localhost:5000/chat', {
            accessTokenFactory: () => this.rootStore.commonStore.token!
        })
        .configureLogging(LogLevel.Information)
        .build();

        this.hubConnection
        .start()
        .then(() => console.log(this.hubConnection!.state))
        .catch((error) => console.log("Error establishing connection: ", error));

        this.hubConnection.on('ReceiveComment', comment => {
        runInAction(() => {
            this.activity!.comments.push(comment)
        })
        })
    };

    @action stopHubConnection = () => {
        this.hubConnection!.stop()
    }
6. Add comments entry in interface IActivity client-app\src\app\models\activity.ts

7. Configure SignalR from client

>  client-app\src\app\store\activityStore.ts
    @action addComment = async (values: any) => {
        values.activityId = this.activity!.id;
        try {
        await this.hubConnection!.invoke('SendComment', values)
        } catch (error) {
        console.log(error);
        }
    } 

8. add client-app\src\features\activities\details\ActivityDetailedChat.tsx

Relational Tables
================
1. Create domain calss - Domain\UserFollowing.cs
2. Add virtual entries in other calsses 
    >Domain\AppUser.cs
        >public string TargetId { get; set; }
        > public virtual AppUser Target { get; set; }
3. Add entry in Persistence\DataContext.cs
    > public DbSet<UserFollowing> Followings { get; set; }
4. Add releation in Persistence\DataContext.cs
    >   builder.Entity<UserFollowing>(b =>
        {
            b.HasKey(k => new { k.ObserverId, k.TargetId });

            b.HasOne(o => o.Observer)
                .WithMany(f => f.Followings)
                .HasForeignKey(o => o.ObserverId)
                .OnDelete(DeleteBehavior.Restrict);

            b.HasOne(o => o.Target)
                .WithMany(f => f.Followers)
                .HasForeignKey(o => o.TargetId)
                .OnDelete(DeleteBehavior.Restrict);
        });
5. Run migrations 
6. Create cammand handler 
    > Application\Followers\Add.cs
7. Create Controller
> API\Controllers\FollowersController.cs

7. Add entry into startup class - API\Startup.cs
    services.AddScoped<IProfileReader, ProfileReader>();